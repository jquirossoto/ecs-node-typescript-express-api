AWSTemplateFormatVersion: '2010-09-09'
Description: 'Express API developed in Typescript and deployed to ECS Fargate that sits behind a private Application Load Balancer and exposed to the world using an Http API Gateway.'

################################### APPLICATION PARAMETERS ###################################

Parameters:

  CodestarConnectionId:
    Type: String
    Description: Specify Codestar connection identifier that is configured and authenticated for the source provider. 

  FullRepositoryId:
    Type: String
    Description: 'Specify the owner and name of the repository where source changes are to be detected. Example: some-user/my-repo.'

  BranchName:
    Type: String
    Description: Specify the name of the branch where source changes are to be detected.

  ArtifactStoreS3Location:
    Type: String
    Description: Specify the name of the S3 bucket to store the CodePipeline artificats.

  AutoScalingMinCapacity:
    Type: Number
    Description: Specify the maximum value that you plan to scale out to.
    Default: 0

  AutoScalingMaxCapacity:
    Type: Number
    Description: Specify the minimum value that you plan to scale in to
    Default: 0

  DuckerHubUsername:
    Type: String
    Description: Specify the DockerHub username to be used when building the docker image.

  DuckerHubPassword:
    Type: String
    Description: Specify the DockerHub password to be used when building the docker image.
    NoEcho: true

################################### APPLICATION MAPPINGS ###################################

Mappings:

  SubnetConfig:
    VPC:
      CIDR: 10.2.0.0/16
    PublicSubnet1:
      CIDR: 10.2.0.0/24
    PublicSubnet2:
      CIDR: 10.2.1.0/24
    PrivateSubnet1:
      CIDR: 10.2.2.0/24
    PrivateSubnet2:
      CIDR: 10.2.3.0/24

  NameConfig:
    ECRRepository:
      Name: pets-api
    Container:
      Name: pets-api
    CodeBuildProject:
      Name: pets-api
    CodeBuildLogGroup:
      Name: /aws/codebuild/pets-api
    DatabaseSecret:
      Name: rds-db-credentials/petsdb5
    DockerHubSecret:
      Name: docker-hub-credentials/pets-api

################################### APPLICATION RESOURCES ###################################

Resources:

  ################################### VPC ###################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]
      InstanceTenancy: default
      EnableDnsHostnames: false
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: PetsAPI-VPC

  ################################### INTERNET GATEWAY ###################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-IG
    
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ################################## PUBLIC ROUTE TABLE ###################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubRT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ################################### PUBLIC SUBNETS ###################################

  ################################### SUBNET1 ###################################

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ SubnetConfig, PublicSubnet1, CIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1
      VpcId: !Ref VPC

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1-NG-EIP
      
  PublicSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1-NG

  ################################### SUBNET2 ###################################

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ SubnetConfig, PublicSubnet2, CIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2
      VpcId: !Ref VPC

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2-NG-EIP
      
  PublicSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet2ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2-NG

  ################################### PRIVATE SUBNETS ###################################

  ################################### SUBNET1 ###################################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ SubnetConfig, PrivateSubnet1, CIDR ]
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN1
      VpcId:
        Ref: VPC

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN1-RT

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1

  RouteToPublicSubnet1NatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NatGateway

  ################################### SUBNET2 ###################################

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ SubnetConfig, PrivateSubnet2, CIDR ]
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN2
      VpcId:
        Ref: VPC

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN2-RT

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2

  RouteToPublicSubnet2NatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NatGateway

  ################################### VPC LINK ###################################

  VPCLinkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PetsAPI-VPCLink-SG
      GroupDescription: PetsAPI VPCLink SG
      SecurityGroupIngress:
        - Description : Allow traffic from the internet
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: PetsAPI-VPCLink-SG
      VpcId: !Ref VPC

  VPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties: 
      Name: PetsAPI-VPCLink
      SecurityGroupIds: 
        - !Ref VPCLinkSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  
  ################################### LOAD BALANCER ###################################

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PetsAPI-LB-SG
      GroupDescription: PetsAPI LoadBalancer SecurityGroup
      SecurityGroupIngress:
        - Description: Allow traffic from VPCLinkSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref VPCLinkSecurityGroup
      Tags:
        - Key: Name
          Value: PetsAPI-LB-SG
      VpcId: !Ref VPC
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PetsAPI-LB
      Type: application
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: PetsAPI-LB-TG
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  ################################### API GATEWAY ###################################

  APIGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PetsAPI-APIGateway
      Description: PetsAPI APIGateway
      ProtocolType: HTTP

  APIGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGateway
      Description: Private ALB Integration
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VPCLink
      IntegrationUri: !Ref LoadBalancerListener 
      PayloadFormatVersion: 1.0

  APIGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGateway
      RouteKey: $default
      Target: !Join [ '/', [ integrations, !Ref APIGatewayIntegration ]]

  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/apigateway/pets-api
      RetentionInDays: 1

  APIGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn:  !Join [ ':', [ !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group', !Ref APIGatewayLogGroup ]]
        Format: 
          '{
            "accountId": "$context.accountId",
            "apiId": "$context.apiId",
            "endpointRequestId": "$context.awsEndpointRequestId",
            "endpointRequestId2": "$context.awsEndpointRequestId2",
            "customDomain.basePathMatched": "$context.customDomain.basePathMatched",
            "dataProcessed": "$context.dataProcessed",
            "domainName": "$context.domainName",
            "domainPrefix": "$context.domainPrefix",
            "error.message": "$context.error.message",
            "error.messageString": "$context.error.messageString",
            "error.responseType": "$context.error.responseType",
            "extendedRequestId": "$context.extendedRequestId",
            "httpMethod": "$context.httpMethod",
            "identity.accountId": "$context.identity.accountId",
            "identity.caller": "$context.identity.caller",
            "identity.sourceIp": "$context.identity.sourceIp",
            "identity.userAgent": "$context.identity.userAgent",
            "integration.error": "$context.integration.error",
            "integration.integrationStatus": "$context.integration.integrationStatus",
            "integration.latency": "$context.integration.latency",
            "integration.requestId": "$context.integration.requestId",
            "integration.status": "$context.integration.status",
            "integration.error.message": "$context.integrationErrorMessage"
            "integration.latency": "$context.integrationLatency"
            "integration.status": "$context.integrationStatus",
            "path": "$context.path",
            "requestId": "$context.requestId", 
          }'
      ApiId: !Ref APIGateway

  ################################### ECR ###################################

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      RepositoryName: !FindInMap [ NameConfig, ECRRepository, Name ]

  ################################### ECS ###################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders:
        - FARGATE
      ClusterName: PetsAPI-ECSCluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-ECSTaskExecutionRole
      Description: PetsAPI-ECSTaskExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-ECSTaskRole
      Description: PetsAPI-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  ECSTaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PetsAPI-ECSTaskRolePolicy
      Roles:
        - !Ref ECSTaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:GetObject
            Resource: '*'

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/ecs/pets-api
      RetentionInDays: 1

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
          - Name: !FindInMap [ NameConfig, Container, Name ]
            Image: !Join [ ':', [ !GetAtt ECRRepository.RepositoryUri, latest ] ]
            HealthCheck:
              Command: 
                - CMD-SHELL
                - curl -f http://localhost:3000/health || exit 1
              Interval: 30
              Retries: 3
              Timeout: 5
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref ECSLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: pets-api
            Essential: true
            PortMappings: 
                # For task definitions that use the awsvpc network mode, you should only specify the containerPort. The hostPort can be left blank or it must be the same value as the containerPort.
              - ContainerPort: 3000
                Protocol: tcp
      Cpu: 256
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Family: PetsAPI-ECSTaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSTaskRole

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PetsAPI-ECS-SG
      GroupDescription: PetsAPI-ECS-SG
      SecurityGroupIngress:
        - Description : Allow traffic from LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: PetsAPI-ECS-SG
      VpcId: !Ref VPC

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
     - LoadBalancerListener
    Properties:
      ServiceName: PetsAPI-ECSService
      Cluster: !Ref ECSCluster
      # Capacity will be handle exclusively by the ECSServiceAutoScalingTarget
      DesiredCount: 0
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
          # The name of the container (as it appears in a container definition)
        - ContainerName: !FindInMap [ NameConfig, Container, Name ]
          ContainerPort: 3000
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !GetAtt ECSService.Name, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  ECSServiceAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join [ '', [ !GetAtt ECSService.Name, AutoScalingPolicy ] ]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  ECSServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref AutoScalingMinCapacity
      MaxCapacity: !Ref AutoScalingMaxCapacity
      ResourceId: !Join [ '/', [ service, !Ref ECSCluster, !GetAtt ECSService.Name ] ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn

  ################################### DATABASE ###################################

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PetsAPI-Database-SG
      GroupDescription: PetsAPI-Database-SG
      SecurityGroupIngress:
        - Description : Allow traffic from ECSServiceSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSServiceSecurityGroup
        - Description : Allow traffic from CodeBuildSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref CodeBuildSecurityGroup
      Tags:
        - Key: Name
          Value: PetsAPI-Database-SG
      VpcId: !Ref VPC

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: PetsAPI-Database-SN-G
      DBSubnetGroupDescription: PetsAPI-Database-SN-G
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret for database instance
      Name: !FindInMap [ NameConfig, DatabaseSecret, Name ]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "pets"}'
        GenerateStringKey: password
        PasswordLength: 15
        ExcludeCharacters: '"@/\'

  DatabaseInstance:
    DeletionPolicy: Delete
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 0
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: PetsAPI-DatabaseInstance
      DBName: petsdb
      DBParameterGroupName: default.postgres13
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      EnableIAMDatabaseAuthentication: false
      Engine: postgres
      EngineVersion: 13.3
      MasterUsername: !Join [ '', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join [ '', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
      MultiAZ: false
      StorageType: gp2
      StorageEncrypted: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  DatabaseSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseSecret
      TargetId: !Ref DatabaseInstance
      TargetType: AWS::RDS::DBInstance

  ################################### CODE BUILD ###################################

  DockerHubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret for DockerHub credentials
      Name: !FindInMap [ NameConfig, DockerHubSecret, Name ]
      SecretString: !Sub '{"username": "${DuckerHubUsername}", "password": "${DuckerHubPassword}"}'

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PetsAPI-CodeBuild-SG
      GroupDescription: PetsAPI-CodeBuild-SG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: PetsAPI-CodeBuild-SG
      VpcId: !Ref VPC

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-CodeBuildRole
      Description: PetsAPI-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole

  CodeBuildBasePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: PetsAPI-CodeBuildBasePolicy
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Resource:
              - !Join [ '', [ !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/', !FindInMap [ NameConfig, CodeBuildProject, Name ] ] ]
              - !Join [ '', [ !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/', !FindInMap [ NameConfig, CodeBuildProject, Name ], ':*' ] ]
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Resource:
              - !Join [ '', [ !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/', !FindInMap [ NameConfig, CodeBuildProject, Name ], '-*' ] ]
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
          - Effect: Allow
            Resource: 
              - !Ref DatabaseSecret
              - !Ref DockerHubSecret
            Action: 
              - secretsmanager:GetSecretValue
          - Effect: Allow
            Resource: '*'
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
              - ecr:GetAuthorizationToken
          - Effect: Allow
            Resource: '*'
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
          - Effect: Allow
            Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
            Action:
              - ec2:CreateNetworkInterfacePermission
            Condition:
              StringEquals:
                ec2:AuthorizedService: codebuild.amazonaws.com
              ArnEquals:
                ec2:Subnet:
                  - !Join [ '/', [ !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet', !Ref PrivateSubnet1 ] ]
                  - !Join [ '/', [ !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet', !Ref PrivateSubnet2 ] ]

  CodeBuildCloudwatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PetsAPI-CodeBuildCloudwatchPolicy
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Resource:
              - !Join [ '', [ !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:', !FindInMap [ NameConfig, CodeBuildLogGroup, Name ] ] ]
              - !Join [ '', [ !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:', !FindInMap [ NameConfig, CodeBuildLogGroup, Name ], ':*' ] ]
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents      
        
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - DatabaseSecretAttachment
    Properties: 
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
        Name: pets-api
        Packaging: NONE
      Cache:
        Type: NO_CACHE
      BadgeEnabled: false
      ConcurrentBuildLimit: 1
      Description: pets api codebuild
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: REGION
            Type: PLAINTEXT
            Value: !Ref AWS::Region
          - Name: REPOSITORY_NAME
            Type: PLAINTEXT
            Value: !FindInMap [ NameConfig, ECRRepository, Name ]
          - Name: CONTAINER_NAME
            Type: PLAINTEXT
            Value: !FindInMap [ NameConfig, Container, Name ]
          - Name: DOCKERHUB_USERNAME
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DockerHubSecret, Name ], username ] ]
          - Name: DOCKERHUB_PASSWORD
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DockerHubSecret, Name ], password ] ]
          - Name: DB_HOST
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DatabaseSecret, Name ], host ] ]
          - Name: DB_PORT
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DatabaseSecret, Name ], port ] ]
          - Name: DB_NAME
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DatabaseSecret, Name ], dbname ] ]
          - Name: DB_USERNAME
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DatabaseSecret, Name ], username ] ]
          - Name: DB_PASSWORD
            Type: SECRETS_MANAGER
            Value: !Join [ ':', [ !FindInMap [ NameConfig, DatabaseSecret, Name ], password ] ]
        Image: aws/codebuild/standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs: 
          GroupName: !FindInMap [ NameConfig, CodeBuildLogGroup, Name ]
          Status: ENABLED
          StreamName: pets-api
        S3Logs:
          Status: DISABLED
      Name: !FindInMap [ NameConfig, CodeBuildProject, Name ]
      QueuedTimeoutInMinutes: 480
      ServiceRole : !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
      # SourceVersion: !Ref BranchName
      TimeoutInMinutes: 60
      VpcConfig:
        SecurityGroupIds: 
          - !Ref CodeBuildSecurityGroup
        Subnets: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        VpcId: !Ref VPC

  ################################### S3 ###################################

  OpenAPIBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: open-api-us-east-1-123456

  ################################### CODE PIPELINE ###################################

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-CodePipelineServiceRole
      Description: PetsAPI-CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole      

  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PetsAPI-CodePipelinePolicy
      Roles:
        - !Ref CodePipelineServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - iam:PassRole
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Resource: '*'
            Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
          - Effect: Allow
            Resource: '*'
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
          - Effect: Allow
            Resource:
              - !Sub arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodestarConnectionId}
            Action:
              - codestar-connections:UseConnection
          - Effect: Allow
            Resource: '*'
            Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
          - Effect: Allow
            Resource: '*'
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
          - Effect: Allow
            Resource: '*'
            Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
          - Effect: Allow
            Resource: '*'
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
          - Effect: Allow
            Resource: '*'
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
          - Effect: Allow
            Resource: '*'
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
          - Effect: Allow
            Resource: '*'
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
          - Effect: Allow
            Resource: '*'
            Action:
              - cloudformation:ValidateTemplate
          - Effect: Allow
            Resource: '*'
            Action:
              - ecr:DescribeImages
          - Effect: Allow
            Resource: '*'
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
          - Effect: Allow
            Resource: '*'
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Type: S3
        # default location
        Location: !Ref ArtifactStoreS3Location
      Name: pets-api-pipeline
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              RunOrder: 1
              Configuration:
                ConnectionArn: !Sub arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodestarConnectionId}
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
                FullRepositoryId: !Ref FullRepositoryId
              Namespace: SourceVariables
              OutputArtifacts: 
                - Name: SourceArtifact
              Region: !Ref AWS::Region
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              Namespace: BuildVariables
              OutputArtifacts:
                - Name: DockerImageArtifact
                - Name: OpenAPIFileArtifact
              Region: !Ref AWS::Region
        - Name: Deploy
          Actions:
            - Name: DeployDockerImage
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: DockerImageArtifact
              RunOrder: 1
            - Name: DeployOpenAPIFile
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Ref OpenAPIBucket
                Extract: true
              InputArtifacts:
                - Name: OpenAPIFileArtifact
              RunOrder: 2

################################### APPLICATION OUTPUTS ###################################

Outputs:
  APIURL:
    Description: Invoke URL
    Value: !Sub https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/