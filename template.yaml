AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

################################### APPLICATION PARAMETERS ###################################

Parameters:

  DatabaseSecretName:
    Description: Specify the database secret name.
    Type: String
    Default: rds-db-credentials/petsdb5

################################### APPLICATION CONDITIONS ###################################
################################### APPLICATION RESOURCES ################################### 

Resources:

  ################################### VPC ###################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      InstanceTenancy: default
      EnableDnsHostnames: false
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: PetsAPI-VPC

  ################################### INTERNET GATEWAY ###################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-IG
    
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ################################## ROUTE TABLES ###################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubRT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 
      - InternetGatewayAttachment
      - PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ################################### PUBLIC SUBNETS ###################################

  ################################### SUBNET1 ###################################

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC 
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1
      VpcId: !Ref VPC

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1-NG-EIP
      
  PublicSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - PublicSubnet1
      - PublicSubnet1ElasticIP
    Properties:
      AllocationId: !GetAtt PublicSubnet1ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN1-NG

  ################################### SUBNET2 ###################################

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.2.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2
      VpcId: !Ref VPC

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2-NG-EIP
      
  PublicSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - PublicSubnet2
      - PublicSubnet2ElasticIP
    Properties:
      AllocationId: !GetAtt PublicSubnet2ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PubSN2-NG

  ################################### PRIVATE SUBNETS ###################################

  ################################### SUBNET1 ###################################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.2.0/24
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN1
      VpcId:
        Ref: VPC

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN1-RT

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet1RouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1

  RouteToPublicSubnet1NatGateway:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateSubnet1RouteTable
      - PublicSubnet1NatGateway
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NatGateway

  ################################### SUBNET2 ###################################

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.2.3.0/24
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN2
      VpcId:
        Ref: VPC

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PetsAPI-VPC-PrivSN2-RT

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet2RouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2

  RouteToPublicSubnet2NatGateway:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateSubnet2RouteTable
      - PublicSubnet2NatGateway
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NatGateway

  ################################### VPC LINK ###################################

  # VPCLinkSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   DependsOn:
  #     - VPC
  #   Properties:
  #     GroupName: PetsAPI-VPCLink-SG
  #     GroupDescription: PetsAPI VPCLink SG
  #     SecurityGroupIngress:
  #       - Description : Allow traffic from the internet
  #         CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #     Tags:
  #       - Key: Name
  #         Value: PetsAPI-VPCLink-SG
  #     VpcId: !Ref VPC

  # VPCLink:
  #   Type: AWS::ApiGatewayV2::VpcLink
  #   DependsOn:
  #     - VPCLinkSecurityGroup
  #     - PrivateSubnet1
  #     - PrivateSubnet1
  #   Properties: 
  #     Name: PetsAPI-VPCLink
  #     SecurityGroupIds: 
  #       - !Ref VPCLinkSecurityGroup
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  
  ################################### LOAD BALANCER ###################################

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VPC
    Properties:
      GroupName: PetsAPI-LB-SG
      GroupDescription: PetsAPI LoadBalancer SecurityGroup
      SecurityGroupIngress:
        - Description: Allow traffic from the internet
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: PetsAPI-LB-SG
      VpcId: !Ref VPC
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - LoadBalancerSecurityGroup
    Properties:
      Name: PetsAPI-LB
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - VPC
    Properties:
      Name: PetsAPI-LB-TG
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - LoadBalancer
      - LoadBalancerTargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: 
      - LoadBalancerListener
      - LoadBalancerTargetGroup
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward

  ################################### ECR ###################################

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      RepositoryName: pets-api
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: CodeBuildAccess
            Effect: Allow
            Principal: 
              Service: codebuild.amazonaws.com
            Action: 
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer

  ################################### ECS ###################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders:
        - FARGATE
      ClusterName: PetsAPI-ECSCluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-ECSTaskExecutionRole
      Description: PetsAPI-ECSTaskExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-ECSTaskRole
      Description: PetsAPI-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  ECSTaskRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - ECSTaskRole
    Properties:
      PolicyName: PetsAPI-ECSTaskRolePolicy
      Roles:
        - !Ref ECSTaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:GetObject
            Resource: '*'

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: containers
      RetentionInDays: 1

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - ECSTaskExecutionRole
      - ECSLogGroup
    Properties:
      ContainerDefinitions:
          - Name: pets-api
            Image: !Join [ ':', [ !GetAtt ECRRepository.RepositoryUri, latest ] ]
            HealthCheck:
              Command: 
                - CMD-SHELL
                - curl -f http://localhost:3000/health || exit 1
              Interval: 30
              Retries: 3
              Timeout: 5
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref ECSLogGroup
                awslogs-region: us-east-1
                awslogs-stream-prefix: pets-api
            Essential: true
            PortMappings: 
                # For task definitions that use the awsvpc network mode, you should only specify the containerPort. The hostPort can be left blank or it must be the same value as the containerPort.
              - ContainerPort: 3000
                Protocol: tcp
      Cpu: 256
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Family: PetsAPI-ECSTaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSTaskRole

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VPC
      - LoadBalancerSecurityGroup
    Properties:
      GroupName: PetsAPI-ECS-SG
      GroupDescription: PetsAPI-ECS-SG
      SecurityGroupIngress:
        - Description : Allow traffic from LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: PetsAPI-ECS-SG
      VpcId: !Ref VPC

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
     - ECSTaskDefinition
     - ECSServiceSecurityGroup
     - PrivateSubnet1
     - PrivateSubnet2
     - LoadBalancerListenerRule
    Properties:
      ServiceName: PetsAPI-ECSService
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
          # The name of the container (as it appears in a container definition)
        - ContainerName: pets-api
          ContainerPort: 3000
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  ################################### CODE BUILD ###################################

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VPC
    Properties:
      GroupName: PetsAPI-CodeBuild-SG
      GroupDescription: PetsAPI-CodeBuild-SG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: PetsAPI-CodeBuild-SG
      VpcId: !Ref VPC

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-CodeBuildRole
      Description: PetsAPI-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole

  CodeBuildBasePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - CodeBuildRole
      - PrivateSubnet1
      - PrivateSubnet2
      - DatabaseSecret
    Properties: 
      PolicyName: PetsAPI-CodeBuildBasePolicy
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Resource:
                # pets-api-codebuild is the name of the codebuild project
              - arn:aws:logs:us-east-1:186521841143:log-group:/aws/codebuild/pets-api-codebuild
              - arn:aws:logs:us-east-1:186521841143:log-group:/aws/codebuild/pets-api-codebuild:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Resource:
              - arn:aws:s3:::codepipeline-us-east-1-*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Resource:
                # pets-api-codebuild is the name of the codebuild project
              - arn:aws:codebuild:us-east-1:186521841143:report-group/pets-api-codebuild-*
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
          - Effect: Allow
            Resource: 
                # /pets-api/dockerhub/* refers to the params in param store (username and password defined in codebuild project)
              - arn:aws:ssm:us-east-1:186521841143:parameter/pets-api/dockerhub/*
            Action: 
              - ssm:GetParameter
              - ssm:GetParameters
          - Effect: Allow
            Resource: 
                # Refers to the secret in secrets manager (database credentials defined in codebuild project)
              - !Ref DatabaseSecret
            Action: 
              - secretsmanager:GetSecretValue
          - Effect: Allow
            Resource:
                # key used to encryt/decrypt DOCKERHUB_USERNAME & DOCKERHUB_PASSWORD params in codebuild project
              - arn:aws:kms:us-east-1:186521841143:key/d0b8969b-d55b-4f94-9091-5fc2d19c76d7
            Action: 
              - kms:Decrypt
              - kms:GenerateDataKey*
          - Effect: Allow
            Resource: '*'
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
              - ecr:GetAuthorizationToken
          - Effect: Allow
            Resource: '*'
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
          - Effect: Allow
            Resource: arn:aws:ec2:us-east-1:186521841143:network-interface/*
            Action:
              - ec2:CreateNetworkInterfacePermission
            Condition:
              StringEquals:
                ec2:AuthorizedService: codebuild.amazonaws.com
              ArnEquals:
                ec2:Subnet:
                  - !Join [ '', [ arn:aws:ec2:us-east-1:186521841143:subnet/, !Ref PrivateSubnet1 ] ]
                  - !Join [ '', [ arn:aws:ec2:us-east-1:186521841143:subnet/, !Ref PrivateSubnet2 ] ]

  CodeBuildCloudwatchPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - CodeBuildRole
    Properties:
      PolicyName: PetsAPI-CodeBuildCloudwatchPolicy
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Resource:
                # pets-api comes from CodeBuildProject -> LogsConfig -> CloudWatchLogs -> GroupName
              - arn:aws:logs:us-east-1:186521841143:log-group:pets-api
              - arn:aws:logs:us-east-1:186521841143:log-group:pets-api:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents      
        
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - CodeBuildRole
      - CodeBuildBasePolicy
    Properties: 
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
        Name: pets-api
        Packaging: NONE
      Cache:
        Type: NO_CACHE
      BadgeEnabled: false
      ConcurrentBuildLimit: 1
      Description: pets api codebuild
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables: 
          - Name: DOCKERHUB_USERNAME
            Type: PARAMETER_STORE
            Value: /pets-api/dockerhub/username
          - Name: DOCKERHUB_PASSWORD
            Type: PARAMETER_STORE
            Value: /pets-api/dockerhub/password
          - Name: DB_HOST
            Type: SECRETS_MANAGER
            Value: !Join [ ':' , [ !Ref DatabaseSecretName, host ]]
          - Name: DB_PORT
            Type: SECRETS_MANAGER
            Value: !Join [ ':' , [ !Ref DatabaseSecretName, port ]]
          - Name: DB_NAME
            Type: SECRETS_MANAGER
            Value: !Join [ ':' , [ !Ref DatabaseSecretName, dbname ]]
          - Name: DB_USERNAME
            Type: SECRETS_MANAGER
            Value: !Join [ ':' , [ !Ref DatabaseSecretName, username ]]
          - Name: DB_PASSWORD
            Type: SECRETS_MANAGER
            Value: !Join [ ':' , [ !Ref DatabaseSecretName, password ]]
        Image: aws/codebuild/standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs: 
          GroupName: pets-api
          Status: ENABLED
          StreamName: pets-api
        S3Logs:
          Status: DISABLED
      Name: pets-api-codebuild
      QueuedTimeoutInMinutes: 480
      ServiceRole : !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
      SourceVersion: master
      TimeoutInMinutes: 60
      VpcConfig:
        SecurityGroupIds: 
          - !Ref CodeBuildSecurityGroup
        Subnets: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        VpcId: !Ref VPC

  ################################### CODE PIPELINE ###################################

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PetsAPI-CodePipelineServiceRole
      Description: PetsAPI-CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole      

  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - CodePipelineServiceRole
    Properties:
      PolicyName: PetsAPI-CodePipelinePolicy
      Roles:
        - !Ref CodePipelineServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - iam:PassRole
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Resource: '*'
            Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
          - Effect: Allow
            Resource: '*'
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
          - Effect: Allow
            Resource:
              - arn:aws:codestar-connections:us-east-1:186521841143:connection/614f4e2f-5920-4072-9f66-b220f2ed97dc
            Action:
              - codestar-connections:UseConnection
          - Effect: Allow
            Resource: '*'
            Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
          - Effect: Allow
            Resource: '*'
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
          - Effect: Allow
            Resource: '*'
            Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
          - Effect: Allow
            Resource: '*'
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
          - Effect: Allow
            Resource: '*'
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
          - Effect: Allow
            Resource: '*'
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
          - Effect: Allow
            Resource: '*'
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
          - Effect: Allow
            Resource: '*'
            Action:
              - cloudformation:ValidateTemplate
          - Effect: Allow
            Resource: '*'
            Action:
              - ecr:DescribeImages
          - Effect: Allow
            Resource: '*'
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
          - Effect: Allow
            Resource: '*'
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodePipelineServiceRole
      - CodeBuildProject
      - ECSCluster
      - ECSService
    Properties: 
      ArtifactStore: 
        Type: S3
        # default location
        Location: codepipeline-us-east-1-91946427360
      Name: pets-api-pipeline
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              RunOrder: 1
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:us-east-1:186521841143:connection/614f4e2f-5920-4072-9f66-b220f2ed97dc
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
                FullRepositoryId: jquirossoto/ecs-node-typescript-express-api
              Namespace: SourceVariables
              OutputArtifacts: 
                - Name: SourceArtifact
              Region: us-east-1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 1
              Configuration:
                ProjectName: pets-api-codebuild
              InputArtifacts:
                - Name: SourceArtifact
              Namespace: BuildVariables
              OutputArtifacts:
                - Name: BuildArtifact
              Region: us-east-1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1

  ################################### DATABASE ###################################

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - ECSServiceSecurityGroup
      - CodeBuildSecurityGroup
      - VPC
    Properties:
      GroupName: PetsAPI-Database-SG
      GroupDescription: PetsAPI-Database-SG
      SecurityGroupIngress:
        - Description : Allow traffic from ECSServiceSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSServiceSecurityGroup
        - Description : Allow traffic from CodeBuildSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref CodeBuildSecurityGroup
      Tags:
        - Key: Name
          Value: PetsAPI-Database-SG
      VpcId: !Ref VPC

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
    Properties:
      DBSubnetGroupName: PetsAPI-Database-SN-G
      DBSubnetGroupDescription: PetsAPI-Database-SN-G
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret for database instance
      Name: !Ref DatabaseSecretName
      GenerateSecretString:
        SecretStringTemplate: '{"username": "pets"}'
        GenerateStringKey: password
        PasswordLength: 15
        ExcludeCharacters: '"@/\'

  DatabaseInstance:
    DeletionPolicy: Delete
    Type: AWS::RDS::DBInstance
    DependsOn:
      - DatabaseSubnetGroup
      - DatabaseSecret
      - DatabaseSecurityGroup
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 0
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: PetsAPI-DatabaseInstance
      DBName: petsdb
      DBParameterGroupName: default.postgres13
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      EnableIAMDatabaseAuthentication: false
      Engine: postgres
      EngineVersion: 13.3
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
      MultiAZ: false
      StorageType: gp2
      StorageEncrypted: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  DatabaseSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn:
      - DatabaseSecret
      - DatabaseInstance
    Properties:
      SecretId: !Ref DatabaseSecret
      TargetId: !Ref DatabaseInstance
      TargetType: AWS::RDS::DBInstance